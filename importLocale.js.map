{"version":3,"sources":["importLocale.js"],"names":["localizationFolder","supportedLocales","output","all","map","locale","fileName","filePath","resolve","exists","stat","isFile","readFile","content","extractXlfData","readXlf","rawData","translatedData","sourceFolder","sourceLocale","trailingComma","folderPath","dirname","original","files","data","translated","mergedData","forEach","key","isTemplate","mergedContent","generateMergedContent","writeFile","mergeToFiles","importLocale","extractKey","str","substring","length","xml2js","compact","xliff","file","Array","isArray","fileData","_attributes","body","units","unit","id","target","_text","value","JSON","parse","template","dataStartIndex","dataEndIndex","startString","endString","keys","lastIdx","dataString","idx","comma","replace","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;yEAyDA;AAAA;;AAAA,QACEA,kBADF,SACEA,kBADF;AAAA,QAEEC,gBAFF,SAEEA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQC,kBAJR,GAIiB,EAJjB;AAAA;AAAA,mBAKQ,kBAAQC,GAAR,CAAYF,iBAAiBG,GAAjB;AAAA,qFAAqB,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BC,gCAD+B,GACjBD,MADiB;AAE/BE,gCAF+B,GAEpB,eAAKC,OAAL,CAAaR,kBAAb,EAAiCM,QAAjC,CAFoB;AAAA;AAAA,+BAG1B,oBAAGG,MAAH,CAAUF,QAAV,CAH0B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAGK,oBAAGG,IAAH,CAAQH,QAAR,CAHL;;AAAA;AAAA,oDAGwBI,MAHxB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAIb,oBAAGC,QAAH,CAAYL,QAAZ,EAAsB,MAAtB,CAJa;;AAAA;AAI7BM,+BAJ6B;;AAKnCX,+BAAOG,MAAP,IAAiBS,eAAe,EAAET,cAAF,EAAUQ,gBAAV,EAAf,CAAjB;;AALmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAArB;;AAAA;AAAA;AAAA;AAAA,gBAAZ,CALR;;AAAA;AAAA,8CAaSX,MAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAea,O;;;;;;yEAuCf;AAAA;;AAAA,QACEC,OADF,SACEA,OADF;AAAA,QAEEC,cAFF,SAEEA,cAFF;AAAA,QAGEC,YAHF,SAGEA,YAHF;AAAA,QAIEC,YAJF,SAIEA,YAJF;AAAA,QAKEC,aALF,SAKEA,aALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOQ,kBAAQjB,GAAR,CAAY,oBAAYc,cAAZ,EAA4Bb,GAA5B;AAAA,qFAAgC,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC1C,kBAAQF,GAAR,CAAY,oBAAYc,eAAeZ,MAAf,CAAZ,EAAoCD,GAApC;AAAA,iGAAwC,kBAAOE,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClDC,4CADkD,GACvC,eAAKC,OAAL,CAAaU,YAAb,EAA2BZ,QAA3B,CADuC;AAElDe,8CAFkD,GAErC,eAAKC,OAAL,CAAaf,QAAb,CAFqC;AAGlDgB,4CAHkD,GAGtCP,QAAQK,UAAR,KAChBL,QAAQK,UAAR,EAAoBG,KADJ,IAEhBR,QAAQK,UAAR,EAAoBG,KAApB,CAA0BnB,MAA1B,CAFgB,IAGhBW,QAAQK,UAAR,EAAoBG,KAApB,CAA0BnB,MAA1B,EAAkCoB,IAHnB,IAG4B,EANW;AAQlDC,8CARkD,GAQrCT,eAAeZ,MAAf,EAAuBC,QAAvB,CARqC;AASlDqB,8CATkD,8BAUnDJ,QAVmD;;AAYxD,wDAAYG,UAAZ,EAAwBE,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACvCF,iDAAWE,GAAX,+BACKH,WAAWG,GAAX,CADL;AAEEC,oDAAaP,SAASM,GAAT,KAAiBN,SAASM,GAAT,EAAcC,UAAd,KAA6B,IAA/C,IACVJ,WAAWG,GAAX,EAAgBC,UAAhB,KAA+B;AAHnC;AAKD,qCAND;AAOMC,iDAnBkD,GAmBlCC,iDACjBhB,QAAQK,UAAR,EAAoBG,KAApB,CAA0BL,YAA1B,CADiB;AAEpBQ,4DAFoB;AAGpBP;AAHoB,uCAnBkC;AAAA;AAAA,2CAwBlD,oBAAGa,SAAH,CAAa,eAAKzB,OAAL,CAAaU,YAAb,EAA2BZ,QAA3B,CAAb,EAAmDyB,aAAnD,CAxBkD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAxC;;AAAA;AAAA;AAAA;AAAA,4BAAZ,CAD0C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAhC;;AAAA;AAAA;AAAA;AAAA,gBAAZ,CAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,Y;;;;;;0EAqCf;AAAA,qFAMI,EANJ;AAAA,qCACEhB,YADF;AAAA,QACEA,YADF;AAAA,uCAEElB,kBAFF;AAAA,QAEEA,kBAFF;AAAA,qCAGEmB,YAHF;AAAA,QAGEA,YAHF;AAAA,uCAIElB,gBAJF;AAAA,QAIEA,gBAJF;AAAA,sCAKEmB,aALF;AAAA,QAKEA,aALF,wCAKkB,IALlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOwB,0BAAW;AAC/BF,wCAD+B;AAE/BC,wCAF+B;AAG/BlB;AAH+B,aAAX,CAPxB;;AAAA;AAOQe,mBAPR;AAAA;AAAA,mBAY+BD,QAAQ;AACnCf,oDADmC;AAEnCC;AAFmC,aAAR,CAZ/B;;AAAA;AAYQgB,0BAZR;AAAA;AAAA,mBAgBQiB,aAAa;AACjBlB,8BADiB;AAEjBC,4CAFiB;AAGjBC,wCAHiB;AAIjBC,wCAJiB;AAKjBC;AALiB,aAAb,CAhBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAee,Y;;;;;AArIf;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAOA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACvB,SAAOA,IAAIC,SAAJ,CAAc,CAAd,EAAiBD,IAAIE,MAAJ,GAAa,CAA9B,CAAP;AACD;;AAED,SAASzB,cAAT,OAA6C;AAAA,MAAnBT,MAAmB,QAAnBA,MAAmB;AAAA,MAAXQ,OAAW,QAAXA,OAAW;;AAC3C,MAAMY,OAAO,gBAAIe,MAAJ,CAAW3B,OAAX,EAAoB,EAAE4B,SAAS,IAAX,EAApB,CAAb;AACA,MAAMvC,SAAS,EAAf;AACA,MACEuB,KAAKiB,KAAL,IACAjB,KAAKiB,KAAL,CAAWC,IAFb,EAGE;AACA,QAAMnB,QAAQoB,MAAMC,OAAN,CAAcpB,KAAKiB,KAAL,CAAWC,IAAzB,IACZlB,KAAKiB,KAAL,CAAWC,IADC,GAEZ,CAAClB,KAAKiB,KAAL,CAAWC,IAAZ,CAFF;AAGAnB,UAAMI,OAAN,CAAc,UAACkB,QAAD,EAAc;AAC1B,UACEA,SAASC,WAAT,IACAD,SAASC,WAAT,CAAqB,iBAArB,MAA4C1C,MAD5C,IAEAyC,SAASE,IAFT,IAGAF,SAASE,IAAT,CAAc,YAAd,CAJF,EAKE;AACA,YAAM1C,WAAWwC,SAASC,WAAT,CAAqBxB,QAAtC;AACArB,eAAOI,QAAP,IAAmB,EAAnB;AACA,YAAM2C,QAAQL,MAAMC,OAAN,CAAcC,SAASE,IAAT,CAAc,YAAd,CAAd,IACZF,SAASE,IAAT,CAAc,YAAd,CADY,GAEZ,CAACF,SAASE,IAAT,CAAc,YAAd,CAAD,CAFF;AAGAC,cAAMrB,OAAN,CAAc,UAACsB,IAAD,EAAU;AACtB,cACEA,KAAKH,WAAL,IACAG,KAAKH,WAAL,CAAiBI,EADjB,IAEAD,KAAKE,MAFL,IAGAF,KAAKE,MAAL,CAAYC,KAJd,EAKE;AACAnD,mBAAOI,QAAP,EAAiB8B,WAAWc,KAAKH,WAAL,CAAiBI,EAA5B,CAAjB,IAAoD;AAClDG,qBAAOC,KAAKC,KAAL,OAAeN,KAAKE,MAAL,CAAYC,KAA3B,OAD2C;AAElDvB,0BAAYoB,KAAKH,WAAL,CAAiBU,QAAjB,KAA8B;AAFQ,aAApD;AAID;AACF,SAZD;AAaD;AACF,KA1BD;AA2BD;AACD,SAAOvD,MAAP;AACD;;AAkBD,SAAS8B,qBAAT,QAMG;AAAA,MALDnB,OAKC,SALDA,OAKC;AAAA,MAJD6C,cAIC,SAJDA,cAIC;AAAA,MAHDC,YAGC,SAHDA,YAGC;AAAA,MAFDhC,UAEC,SAFDA,UAEC;AAAA,MADDP,aACC,SADDA,aACC;;AACD,MAAMwC,cAAc/C,QAAQyB,SAAR,CAAkB,CAAlB,EAAqBoB,cAArB,CAApB;AACA,MAAMG,YAAYhD,QAAQyB,SAAR,CAAkBqB,YAAlB,CAAlB;AACA,MAAMG,OAAO,oBAAYnC,UAAZ,CAAb;AACA,MAAMoC,UAAUD,KAAKvB,MAAL,GAAc,CAA9B;AACA,MAAMyB,aAAaF,KAAK1D,GAAL,CAAS,UAACyB,GAAD,EAAMoC,GAAN,EAAc;AACxC,QAAMC,QAASD,MAAMF,OAAN,IAAiB3C,aAAlB,GACZ,GADY,GAEZ,EAFF;AAGA,QAAMkC,QAAQ3B,WAAWE,GAAX,EAAgBC,UAAhB,SACPH,WAAWE,GAAX,EAAgByB,KADT,gBAER3B,WAAWE,GAAX,EAAgByB,KAAhB,CAAsBa,OAAtB,CAA8B,IAA9B,EAAoC,MAApC,CAFQ,OAAd;AAGA,kBAAYtC,GAAZ,UAAoByB,KAApB,GAA4BY,KAA5B;AACD,GARkB,EAQhBE,IARgB,CAQX,IARW,CAAnB;AASA,SAAUR,WAAV,UAA0BI,UAA1B,UAAyCH,SAAzC;AACD;;kBAgEc1B,Y","file":"importLocale.js","sourcesContent":["import fs from 'fs-promise';\nimport path from 'path';\nimport xml from 'xml-js';\n\nimport getRawData from './getRawData';\nimport {\n  defaultSupportedLocales,\n  defaultSourceLocale,\n  defaultSourceFolder,\n  defaultLocalizationFolder,\n} from './defaults';\n\nfunction extractKey(str) {\n  return str.substring(1, str.length - 1);\n}\n\nfunction extractXlfData({ locale, content }) {\n  const data = xml.xml2js(content, { compact: true });\n  const output = {};\n  if (\n    data.xliff &&\n    data.xliff.file\n  ) {\n    const files = Array.isArray(data.xliff.file) ?\n      data.xliff.file :\n      [data.xliff.file];\n    files.forEach((fileData) => {\n      if (\n        fileData._attributes &&\n        fileData._attributes['target-language'] === locale &&\n        fileData.body &&\n        fileData.body['trans-unit']\n      ) {\n        const fileName = fileData._attributes.original;\n        output[fileName] = {};\n        const units = Array.isArray(fileData.body['trans-unit']) ?\n          fileData.body['trans-unit'] :\n          [fileData.body['trans-unit']];\n        units.forEach((unit) => {\n          if (\n            unit._attributes &&\n            unit._attributes.id &&\n            unit.target &&\n            unit.target._text\n          ) {\n            output[fileName][extractKey(unit._attributes.id)] = {\n              value: JSON.parse(`\"${unit.target._text}\"`),\n              isTemplate: unit._attributes.template === 'true',\n            };\n          }\n        });\n      }\n    });\n  }\n  return output;\n}\n\nasync function readXlf({\n  localizationFolder,\n  supportedLocales,\n}) {\n  const output = {};\n  await Promise.all(supportedLocales.map(async (locale) => {\n    const fileName = `${locale}.xlf`;\n    const filePath = path.resolve(localizationFolder, fileName);\n    if ((await fs.exists(filePath)) && (await fs.stat(filePath)).isFile()) {\n      const content = await fs.readFile(filePath, 'utf8');\n      output[locale] = extractXlfData({ locale, content });\n    }\n  }));\n  return output;\n}\n\nfunction generateMergedContent({\n  content,\n  dataStartIndex,\n  dataEndIndex,\n  mergedData,\n  trailingComma,\n}) {\n  const startString = content.substring(0, dataStartIndex);\n  const endString = content.substring(dataEndIndex);\n  const keys = Object.keys(mergedData);\n  const lastIdx = keys.length - 1;\n  const dataString = keys.map((key, idx) => {\n    const comma = (idx < lastIdx || trailingComma) ?\n      ',' :\n      '';\n    const value = mergedData[key].isTemplate ?\n      `\\`${mergedData[key].value}\\`` :\n      `'${mergedData[key].value.replace(/'/g, '\\\\\\'')}'`;\n    return `  ${key}: ${value}${comma}`;\n  }).join('\\n');\n  return `${startString}\\n${dataString}\\n${endString}`;\n}\n\nasync function mergeToFiles({\n  rawData,\n  translatedData,\n  sourceFolder,\n  sourceLocale,\n  trailingComma,\n}) {\n  await Promise.all(Object.keys(translatedData).map(async (locale) => {\n    await Promise.all(Object.keys(translatedData[locale]).map(async (fileName) => {\n      const filePath = path.resolve(sourceFolder, fileName);\n      const folderPath = path.dirname(filePath);\n      const original = (rawData[folderPath] &&\n        rawData[folderPath].files &&\n        rawData[folderPath].files[locale] &&\n        rawData[folderPath].files[locale].data) || {};\n\n      const translated = translatedData[locale][fileName];\n      const mergedData = {\n        ...original\n      };\n      Object.keys(translated).forEach((key) => {\n        mergedData[key] = {\n          ...translated[key],\n          isTemplate: (original[key] && original[key].isTemplate === true) ||\n            translated[key].isTemplate === true,\n        };\n      });\n      const mergedContent = generateMergedContent({\n        ...rawData[folderPath].files[sourceLocale],\n        mergedData,\n        trailingComma,\n      });\n      await fs.writeFile(path.resolve(sourceFolder, fileName), mergedContent);\n    }));\n  }));\n}\n\nasync function importLocale({\n  sourceFolder = defaultSourceFolder,\n  localizationFolder = defaultLocalizationFolder,\n  sourceLocale = defaultSourceLocale,\n  supportedLocales = defaultSupportedLocales,\n  trailingComma = true,\n} = {}) {\n  const rawData = await getRawData({\n    sourceFolder,\n    sourceLocale,\n    supportedLocales,\n  });\n  const translatedData = await readXlf({\n    localizationFolder,\n    supportedLocales,\n  });\n  await mergeToFiles({\n    rawData,\n    translatedData,\n    sourceFolder,\n    sourceLocale,\n    trailingComma,\n  });\n}\n\nexport default importLocale;\n\n"]}