{"version":3,"sources":["getRawData.js"],"names":["fileList","loaderFiles","all","map","file","stat","isFile","readFile","content","test","add","getLoaderFiles","localeFile","parsed","sourceType","idx","len","tokens","length","capturing","data","dataStartIndex","dataEndIndex","token","type","_export","_default","braceL","end","braceR","start","parseLine","item","newIdx","key","extractData","folderPath","sourceLocale","supportedLocales","readdir","localeFiles","filter","localeData","path","files","locale","replace","indexOf","resolve","getLocaleData","startingIdx","keyArray","push","value","label","colon","valueArray","isTemplate","inTemplate","backQuote","comma","join","substring","sourceFolder","reject","err","m","rawData","f","dirname","getRawData"],"mappings":"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","file":"getRawData.js","sourcesContent":["import fs from 'fs-promise';\nimport path from 'path';\nimport glob from 'glob';\nimport { parse, tokTypes } from 'babylon';\nimport isLocaleFile from './isLocaleFile';\nimport loaderRegExp from './loaderRegExp';\nimport formatLocale from './formatLocale';\n\nexport async function getLoaderFiles(fileList) {\n  const loaderFiles = new Set();\n  await Promise.all(fileList.map(async (file) => {\n    if ((await fs.stat(file)).isFile()) {\n      const content = await fs.readFile(file, 'utf8');\n      if (loaderRegExp.test(content)) {\n        loaderFiles.add(file);\n      }\n    }\n  }));\n  return [...loaderFiles];\n}\n\nexport function parseLine(tokens, startingIdx) {\n  let idx = startingIdx;\n  let token = tokens[idx];\n  const keyArray = [];\n  do {\n    keyArray.push(typeof token.value !== 'undefined' ? token.value : token.type.label);\n    idx += 1;\n    token = tokens[idx];\n  } while (token.type !== tokTypes.colon);\n  const valueArray = [];\n  idx += 1;\n  token = tokens[idx];\n  let isTemplate = false;\n  let inTemplate = false;\n  do {\n    if (\n      token.type === tokTypes.backQuote\n    ) {\n      isTemplate = true;\n      inTemplate = !inTemplate;\n    } else {\n      valueArray.push(typeof token.value !== 'undefined' ? token.value : token.type.label);\n    }\n    idx += 1;\n    token = tokens[idx];\n  } while (token.type !== tokTypes.comma && (inTemplate || token.type !== tokTypes.braceR));\n  const value = JSON.stringify(valueArray.join(''));\n  return [{\n    key: keyArray.join(''),\n    value: value.substring(1, value.length - 1),\n    isTemplate,\n  }, token.type !== tokTypes.braceR ? idx + 1 : -1];\n}\n\nexport async function extractData(localeFile) {\n  const content = await fs.readFile(localeFile, 'utf8');\n  const parsed = parse(content, { sourceType: 'module' });\n  let idx = 0;\n  const len = parsed.tokens.length;\n  let capturing = false;\n  const data = {};\n  let dataStartIndex = null;\n  let dataEndIndex = null;\n  while (idx < len && idx !== -1) {\n    const token = parsed.tokens[idx];\n    if (\n      token.type === tokTypes._export &&\n      parsed.tokens[idx + 1].type === tokTypes._default &&\n      parsed.tokens[idx + 2].type === tokTypes.braceL\n    ) {\n      dataStartIndex = parsed.tokens[idx + 2].end;\n      capturing = true;\n      idx += 3;\n    } else if (capturing) {\n      if (token.type === tokTypes.braceR) {\n        dataEndIndex = token.start;\n        break;\n      } else {\n        const [item, newIdx] = parseLine(parsed.tokens, idx);\n        data[item.key] = item;\n        idx = newIdx;\n      }\n    } else {\n      idx += 1;\n    }\n  }\n\n  return {\n    content,\n    data,\n    dataStartIndex,\n    dataEndIndex,\n  };\n}\n\nexport async function getLocaleData({ folderPath, sourceLocale, supportedLocales }) {\n  const localeFiles = (await fs.readdir(folderPath)).filter(isLocaleFile);\n  const localeData = {\n    path: folderPath,\n    files: {},\n  };\n  await Promise.all(localeFiles.map(async (file) => {\n    const locale = formatLocale(file.replace(/\\.(js|json)$/i, ''));\n    if (locale === sourceLocale || supportedLocales.indexOf(locale) > -1) {\n      localeData.files[locale] = {\n        file,\n        locale,\n        ...(await extractData(path.resolve(folderPath, file))),\n      };\n    }\n  }));\n  return localeData;\n}\n\nexport default async function getRawData({\n  sourceFolder,\n  sourceLocale,\n  supportedLocales,\n}) {\n  const fileList = await new Promise((resolve, reject) => {\n    glob(`${sourceFolder}/**`, (err, m) => {\n      if (err) {\n        return reject(err);\n      }\n      return resolve(m);\n    });\n  });\n  const loaderFiles = await getLoaderFiles(fileList);\n  const rawData = {};\n  await Promise.all(loaderFiles.map(async (f) => {\n    const folderPath = path.resolve(path.dirname(f));\n    rawData[folderPath] = await getLocaleData({\n      folderPath,\n      sourceLocale,\n      supportedLocales,\n    });\n  }));\n  return rawData;\n}\n"]}