{"version":3,"sources":["exportLocale.js"],"names":["fileList","loaderFiles","all","map","file","stat","isFile","readFile","content","test","add","getLoaderFiles","localeFile","parsed","sourceType","idx","len","tokens","length","capturing","data","token","type","_export","_default","braceL","braceR","parseLine","item","newIdx","key","extractData","folderPath","sourceLocale","supportedLocales","readdir","localeFiles","filter","localeData","path","files","locale","replace","indexOf","resolve","getLocaleData","src","reject","err","m","rawData","f","dirname","push","getRawData","dest","xlfData","allLocales","forEach","_declaration","_attributes","version","xliff","xmlns","folderData","sourceFile","keys","targetFile","fileName","original","join","missingKeys","datatype","body","id","template","isTemplate","source","_text","value","target","exists","writeFile","json2xml","compact","spaces","exportXlf","startingIdx","keyArray","label","colon","valueArray","inTemplate","backQuote","comma","substring","compileFolderData","output","exportLocale"],"mappings":"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","file":"exportLocale.js","sourcesContent":["import fs from 'fs-promise';\nimport path from 'path';\nimport glob from 'glob';\nimport xml from 'xml-js';\nimport mkdirp from 'mkdirp-promise';\nimport { parse, tokTypes } from 'babylon';\nimport isLocaleFile from './isLocaleFile';\nimport loaderRegExp from './loaderRegExp';\nimport formatLocale from './formatLocale';\n\n\nasync function getLoaderFiles(fileList) {\n  const loaderFiles = new Set();\n  await Promise.all(fileList.map(async (file) => {\n    if ((await fs.stat(file)).isFile()) {\n      const content = await fs.readFile(file, 'utf8');\n      if (loaderRegExp.test(content)) {\n        loaderFiles.add(file);\n      }\n    }\n  }));\n  return [...loaderFiles];\n}\n\nfunction parseLine(tokens, startingIdx) {\n  let idx = startingIdx;\n  let token = tokens[idx];\n  const keyArray = [];\n  do {\n    keyArray.push(typeof token.value !== 'undefined' ? token.value : token.type.label);\n    idx += 1;\n    token = tokens[idx];\n  } while (token.type !== tokTypes.colon);\n  const valueArray = [];\n  idx += 1;\n  token = tokens[idx];\n  let isTemplate = false;\n  let inTemplate = false;\n  do {\n    if (\n      token.type === tokTypes.backQuote\n    ) {\n      isTemplate = true;\n      inTemplate = !inTemplate;\n    } else {\n      valueArray.push(typeof token.value !== 'undefined' ? token.value : token.type.label);\n    }\n    idx += 1;\n    token = tokens[idx];\n  } while (token.type !== tokTypes.comma && (inTemplate || token.type !== tokTypes.braceR));\n  const value = JSON.stringify(valueArray.join(''));\n  return [{\n    key: keyArray.join(''),\n    value: value.substring(1, value.length - 1),\n    isTemplate,\n  }, token.type !== tokTypes.braceR ? idx + 1 : -1];\n}\n\nasync function extractData(localeFile) {\n  const content = await fs.readFile(localeFile, 'utf8');\n  const parsed = parse(content, { sourceType: 'module' });\n  let idx = 0;\n  const len = parsed.tokens.length;\n  let capturing = false;\n  const data = {};\n  while (idx < len && idx !== -1) {\n    const token = parsed.tokens[idx];\n    if (\n      token.type === tokTypes._export &&\n      parsed.tokens[idx + 1].type === tokTypes._default &&\n      parsed.tokens[idx + 2].type === tokTypes.braceL\n    ) {\n      capturing = true;\n      idx += 3;\n    } else if (capturing) {\n      if (token.type === tokTypes.braceR) {\n        break;\n      } else {\n        const [item, newIdx] = parseLine(parsed.tokens, idx);\n        data[item.key] = item;\n        idx = newIdx;\n      }\n    } else {\n      idx += 1;\n    }\n  }\n  return {\n    content,\n    data,\n  };\n}\n\nfunction compileFolderData(files) {\n  const output = {};\n  files.forEach(({ locale, data }) => {\n    Object.keys(data).forEach((key) => {\n      if (!output[key]) {\n        output[key] = {};\n      }\n      output[key][locale] = data[key];\n    });\n  });\n  return output;\n}\n\nasync function getLocaleData({ folderPath, sourceLocale, supportedLocales }) {\n  const localeFiles = (await fs.readdir(folderPath)).filter(isLocaleFile);\n  const localeData = {\n    path: folderPath,\n    files: {},\n  };\n  await Promise.all(localeFiles.map(async (file) => {\n    const locale = formatLocale(file.replace(/\\.(js|json)$/i, ''));\n    if (locale === sourceLocale || supportedLocales.indexOf(locale) > -1) {\n      localeData.files[locale] = {\n        file,\n        locale,\n        ...(await extractData(path.resolve(folderPath, file))),\n      };\n    }\n  }));\n  return localeData;\n}\n\nasync function getRawData({\n  src,\n  sourceLocale,\n  supportedLocales,\n}) {\n  const fileList = await new Promise((resolve, reject) => {\n    glob(src, (err, m) => {\n      if (err) {\n        return reject(err);\n      }\n      return resolve(m);\n    });\n  });\n  const loaderFiles = await getLoaderFiles(fileList);\n  const rawData = [];\n  await Promise.all(loaderFiles.map(async (f) => {\n    const folderPath = path.dirname(f);\n    rawData.push(await getLocaleData({ folderPath, sourceLocale, supportedLocales }));\n  }));\n  return rawData;\n}\n\nasync function exportXlf({\n  rawData,\n  sourceLocale,\n  supportedLocales,\n  dest,\n}) {\n  // console.log(JSON.stringify(rawData, null, 2));\n  const xlfData = {};\n  const allLocales = supportedLocales.filter(locale => locale !== sourceLocale);\n\n  allLocales.forEach((locale) => {\n    xlfData[locale] = {\n      _declaration: {\n        _attributes: {\n          version: '1.0',\n        }\n      },\n      xliff: {\n        _attributes: {\n          version: '1.2',\n          xmlns: 'urn:oasis:names:tc:xliff:document:1.2',\n        },\n      },\n    };\n  });\n\n  rawData.forEach((folderData) => {\n    const sourceFile = folderData.files[sourceLocale];\n    if (sourceFile) {\n      const keys = Object.keys(sourceFile.data);\n      supportedLocales.forEach((locale) => {\n        if (locale !== sourceLocale) {\n          const targetFile = folderData.files[locale];\n          const fileName = (targetFile && targetFile.file) || `${locale}.js`;\n          const original = path.join(folderData.path, fileName);\n          const missingKeys = keys.filter(key => (!targetFile || !targetFile.data[key]));\n\n          if (missingKeys.length) {\n            const data = {\n              _attributes: {\n                original,\n                'source-language': sourceLocale,\n                'target-language': locale,\n                datatype: 'plaintext',\n              },\n              body: {\n                'trans-unit': missingKeys.map(key => ({\n                  _attributes: {\n                    id: `[${key}]`,\n                    template: sourceFile.data[key].isTemplate ? 'true' : 'false',\n                  },\n                  source: {\n                    _text: sourceFile.data[key].value,\n                  },\n                  target: {\n                    _text: sourceFile.data[key].value,\n                  },\n                })),\n              },\n            };\n\n            if (!xlfData[locale].xliff.file) {\n              xlfData[locale].xliff.file = [];\n            }\n            xlfData[locale].xliff.file.push(data);\n          }\n        }\n      });\n    }\n  });\n  if (!(await fs.exists(dest))) {\n    await mkdirp(dest);\n  }\n  await Promise.all(allLocales.map(async (locale) => {\n    const fileName = path.resolve(dest, `${locale}.xlf`);\n    await fs.writeFile(fileName, xml.json2xml(xlfData[locale], { compact: true, spaces: 4 }));\n  }));\n}\n\nexport default async function exportLocale({\n  src = './src/**/*',\n  dest = './localization',\n  sourceLocale = 'en-US',\n  supportedLocales = ['en-GB', 'en-CA', 'fr-FR', 'fr-CA', 'de-DE'],\n} = {}) {\n  const rawData = await getRawData({\n    src,\n    sourceLocale,\n    supportedLocales,\n  });\n  await exportXlf({\n    rawData,\n    dest,\n    sourceLocale,\n    supportedLocales,\n  });\n}\n"]}