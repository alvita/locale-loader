{"version":3,"sources":["exportLocale.js"],"names":["rawData","sourceLocale","supportedLocales","sourceFolder","localizationFolder","xlfData","allLocales","filter","locale","forEach","_declaration","_attributes","version","xliff","xmlns","folderPath","folderData","sourceFile","files","keys","data","targetFile","fileName","file","original","relative","join","path","missingKeys","key","length","datatype","body","map","id","template","isTemplate","source","_text","value","target","push","exists","all","resolve","writeFile","json2xml","compact","spaces","exportXlf","exportLocale"],"mappings":"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","file":"exportLocale.js","sourcesContent":["import fs from 'fs-promise';\nimport path from 'path';\nimport xml from 'xml-js';\nimport mkdirp from 'mkdirp-promise';\nimport getRawData from './getRawData';\nimport {\n  defaultSupportedLocales,\n  defaultSourceLocale,\n  defaultSourceFolder,\n  defaultLocalizationFolder,\n} from './defaults';\n\nexport async function exportXlf({\n  rawData,\n  sourceLocale,\n  supportedLocales,\n  sourceFolder,\n  localizationFolder,\n}) {\n  // console.log(JSON.stringify(rawData, null, 2));\n  const xlfData = {};\n  const allLocales = supportedLocales.filter(locale => locale !== sourceLocale);\n\n  allLocales.forEach((locale) => {\n    xlfData[locale] = {\n      _declaration: {\n        _attributes: {\n          version: '1.0',\n        }\n      },\n      xliff: {\n        _attributes: {\n          version: '1.2',\n          xmlns: 'urn:oasis:names:tc:xliff:document:1.2',\n        },\n      },\n    };\n  });\n\n  Object.keys(rawData).forEach((folderPath) => {\n    const folderData = rawData[folderPath];\n    const sourceFile = folderData.files[sourceLocale];\n    if (sourceFile) {\n      const keys = Object.keys(sourceFile.data);\n      supportedLocales.forEach((locale) => {\n        if (locale !== sourceLocale) {\n          const targetFile = folderData.files[locale];\n          const fileName = (targetFile && targetFile.file) || `${locale}.js`;\n          const original = path.relative(\n            sourceFolder,\n            path.join(folderData.path, fileName),\n          );\n          const missingKeys = keys.filter(key => (!targetFile || !targetFile.data[key]));\n\n          if (missingKeys.length) {\n            const data = {\n              _attributes: {\n                original,\n                'source-language': sourceLocale,\n                'target-language': locale,\n                datatype: 'plaintext',\n              },\n              body: {\n                'trans-unit': missingKeys.map(key => ({\n                  _attributes: {\n                    id: `[${key}]`,\n                    template: sourceFile.data[key].isTemplate ? 'true' : 'false',\n                  },\n                  source: {\n                    _text: sourceFile.data[key].value,\n                  },\n                  target: {\n                    _text: sourceFile.data[key].value,\n                  },\n                })),\n              },\n            };\n\n            if (!xlfData[locale].xliff.file) {\n              xlfData[locale].xliff.file = [];\n            }\n            xlfData[locale].xliff.file.push(data);\n          }\n        }\n      });\n    }\n  });\n  if (!(await fs.exists(localizationFolder))) {\n    await mkdirp(localizationFolder);\n  }\n  await Promise.all(allLocales.map(async (locale) => {\n    const fileName = path.resolve(localizationFolder, `${locale}.xlf`);\n    await fs.writeFile(fileName, xml.json2xml(xlfData[locale], { compact: true, spaces: 4 }));\n  }));\n}\n\nasync function exportLocale({\n  sourceFolder = defaultSourceFolder,\n  localizationFolder = defaultLocalizationFolder,\n  sourceLocale = defaultSourceLocale,\n  supportedLocales = defaultSupportedLocales,\n} = {}) {\n  const rawData = await getRawData({\n    sourceFolder,\n    sourceLocale,\n    supportedLocales,\n  });\n  await exportXlf({\n    rawData,\n    sourceFolder,\n    localizationFolder,\n    sourceLocale,\n    supportedLocales,\n  });\n}\n\nexport default exportLocale;\n"]}